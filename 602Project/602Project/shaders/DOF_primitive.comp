#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "shared_structs.h"

const int GROUP_SIZE = 128;
layout(local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D outImage;
layout(set = 0, binding = 1) uniform sampler2D inImage;
layout(set = 0, binding = 2) uniform sampler2D depthImage;
layout(set = 0, binding = 3, rgba32f) uniform image2D tile_max_buffer;

layout(push_constant) uniform _pc_DOF { PushConstantDoF pc; };

int num_taps = 10;
float POISSON[10] = float[10](2/10.0f, -3/10.0f, -8/10.0f, 5/10.0f, 3/10.0f, -5/10.0f, 2/10.0f, -4/10.0f, -3/10.0f, 4/10.0f);

float coc_max = 35.0f;
float coc_min = 5.0f;

float near_plane = 0.3f;
float focal_plane = 2.0f;
float far_plane = 3.8f;

float ComputeDepthBlur(float depth) {
    float depth_blur;
    if (depth < focal_plane) {
        depth_blur = (depth - focal_plane) / (focal_plane - near_plane);
    }
    else {
        depth_blur = (depth - focal_plane) / (far_plane - focal_plane);
        depth_blur = min(depth_blur, 1);
    }

    //Scale and bias into range of 0 - 1
    return (depth_blur * 0.5) + 0.5 ;
}

void main()
{
    ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = gpos / vec2(imageSize(outImage));
    vec2 pixel_size = 1 / vec2(imageSize(outImage));
    if (pc.alignmentTest != 1234){
        imageStore(outImage, gpos, vec4(vec3(0, 1, 1), 1));
        return;
    }
    vec4 out_color = vec4(0);
    vec4 depth = texture(depthImage, uv);

    float blur = ComputeDepthBlur(depth.r);
    float blur_radius = abs((blur * coc_max) - coc_min);

    vec2 read_coords;
    float tap_depth;
    float tap_blur;
    vec4 tap_color;
    for (int t = 0; t < num_taps; t++) {
        read_coords = uv + (pixel_size * POISSON[t] * blur_radius);
        tap_depth = texture(depthImage, read_coords).r;
        tap_blur = ComputeDepthBlur(tap_depth);
        tap_color = texture(inImage, read_coords);
        out_color.rgb += tap_color.rgb * tap_blur;
        out_color.a += tap_blur;
    }

    imageStore(outImage, gpos, out_color / out_color.a);
}
