#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "shared_structs.h"

#define PI 3.14159

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D out_image;
layout(set = 0, binding = 1) uniform sampler2D downscaled_color_depth;

layout(push_constant) uniform _pc_DOF { PushConstantRaymask pc; };

#include "EdgeDetectionUtil"

const mat3 G_KERNEL = mat3(
  1, 1, 1,
  1, 1, 1,
  1, 1, 1
);

shared float group_xn[32][32];

void main()
{
    ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);

    vec2 resolution = vec2(textureSize(downscaled_color_depth, 0));
    
    vec2 pixel_size = 1.0f / resolution;
    
    vec2 load_coord = gpos * pixel_size;

    vec2 grad = getTextureIntensityGradient(downscaled_color_depth, load_coord, resolution);

    float edge_val = length(grad);

    float xn = clamp(1 - (1 / (edge_val+1)), 0.0f, 1.0f);

    float depth = texture(downscaled_color_depth, load_coord).w;
    imageStore(out_image, gpos, vec4(xn, depth, 0.0f, 1.0f));

    barrier();

    mat3 imgMat = mat3(0.);

    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j < 1; j++) {
            ivec2 load_pos = gpos + ivec2(i, j);
            imgMat[i][j] = imageLoad(out_image, load_pos).r;
        }
    }
    float blurred_xn = convoluteMatrices(G_KERNEL, imgMat);

    //Prev N for accumulation average used in ray casting
    float prev_n = imageLoad(out_image, gpos).z;

    imageStore(out_image, gpos, vec4(blurred_xn, depth, prev_n, 1.0f));
}
