#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "shared_structs.h"

layout(push_constant) uniform _pc_tile_max { PushConstantTileMax pc; };

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D vel_depth_buffer;
layout(set = 0, binding = 1, rgba32f) uniform image2D tile_max_buffer;

float Vd = (pc.focal_length * pc.focal_distance) / (pc.focal_distance - pc.focal_length);

float CaclulateCoCDiameter(float depth) {
    //Following caculation taken from [Potmesil 1982]
    if (depth <= pc.focal_length)
        return 1;

    float Vp = (pc.focal_length * depth) / (depth - pc.focal_length);

    return abs(Vd - Vp) * (pc.lens_diameter / Vd); 
}

void main()
{
    ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);
    if (pc.alignmentTest != 1234){
        imageStore(tile_max_buffer, gpos, vec4(vec3(0, 1, 1), 1));
        return;
    }
    ivec2 load_pos = gpos * pc.tile_size;
    float min_depth = 1000.0f;
    float max_coc = 0.0f;
    vec2 max_velo = vec2(0.0f);
    ivec2 it_load_pos;
    vec4 vel_depth;
    int iter_max = pc.tile_size/2;
    for (int i=-2; i <= iter_max; ++i) {
        for (int j=-2; j <= iter_max; ++j) {
            it_load_pos = load_pos + ivec2(i, j);
            vel_depth = imageLoad(vel_depth_buffer, it_load_pos);
            min_depth = min(min_depth, vel_depth.w);
            max_coc = max(max_coc, CaclulateCoCDiameter(vel_depth.w));
            if (length(max_velo) < length(vel_depth.rg)) {
                max_velo = vel_depth.rg;
            }
        }
    }

    imageStore(tile_max_buffer, gpos, 
               vec4(max_velo, min_depth, max_coc));
}
