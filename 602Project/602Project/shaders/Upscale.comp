#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "shared_structs.h"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D out_image;
layout(set = 0, binding = 1) uniform sampler2D half_res_buffer;
layout(set = 0, binding = 2, rgba32f) uniform image2D full_res_color_buffer;
layout(set = 0, binding = 3, rgba32f) uniform image2D full_res_depth_buffer;
layout(set = 0, binding = 4, rgba32f) uniform image2D neighbour_max_buffer;

layout(push_constant) uniform _pc_upsample { PushConstantDoF pc; };

#include "util"

//Bicubic filtering implementation from http://www.java-gaming.org/index.php?topic=35123.0

vec4 cubic(float v){
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 textureBicubic(sampler2D src, vec2 texCoords){

   vec2 texSize = textureSize(src, 0);
   vec2 invTexSize = 1.0 / texSize;
   
   texCoords = texCoords * texSize - 0.5;

   
    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;
    
    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;
    
    offset *= invTexSize.xxyy;
    
    vec4 sample0 = texture(src, offset.xz);
    vec4 sample1 = texture(src, offset.yz);
    vec4 sample2 = texture(src, offset.xw);
    vec4 sample3 = texture(src, offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
       mix(sample3, sample2, sx), mix(sample1, sample0, sx)
    , sy);
}

float CoCFactor(float sample_coc) {
    return clamp(
        1.0f - ((sample_coc / pc.coc_sample_scale)*100),
        0.0f, 
        1.0f
    );
}

void main()
{
    ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);

    vec2 pixel_size = 1.0f / vec2(imageSize(out_image));
    vec2 half_px = 0.5*pixel_size;

    vec4 full_res_color = imageLoad(full_res_color_buffer, gpos);
    vec2 uv = pixel_size * gpos;
    vec4 upscaled_color = textureBicubic(half_res_buffer, uv);

    float full_res_depth = imageLoad(full_res_depth_buffer, gpos).w;
    float coc = CaclulateCoCDiameter(full_res_depth);
    float bg_factor = CoCFactor(coc);
    
    float neighbour_max_coc = imageLoad(neighbour_max_buffer, gpos/pc.tile_size).w;
    float fg_factor = CoCFactor(neighbour_max_coc);

    float combined_factor = mix(bg_factor, fg_factor, upscaled_color.a);
    vec4 out_color = mix(upscaled_color, full_res_color, combined_factor);

    imageStore(out_image, gpos, out_color);
}
